@startuml

class Variable {
    - name : string
    - domain : set<int>
    - domainDelta : stack<int>
    - assigned : bool
    + reduceDomain(value : int) : void
    + restoreLastDomain() : void
    + assign() : void
    + unassign() : void
    + getName() : string
    + isAssigned() : bool
}

abstract class Constraint {
    + isSatisfied(assignments : unordered_map<string, int>) : bool
    + getScope() : vector<Variable*>
}

class CSP {
    - variables : vector<Variable>
    - constraints : vector<unique_ptr<Constraint>>
    + addVariable(var : Variable) : void
    + addConstraint(constraint : unique_ptr<Constraint>) : void
    + assignVariable(var : Variable&, value : int) void
    + getUnassignedVariables() : vector<Variable*>
    + CSP(const CSP&) = delete
    + operator=(const CSP&) : CSP& = delete
    + CSP(CSP&&) = delete
    + operator=(CSP&&) : CSP& = delete
}

class Solver {
    - csp : CSP&
    - assignments : unordered_map<string, int>
    - backtrackingSearch() : bool
    - forwardChecking() : void
    - arcConsistency() : void
    - minimumRemainingValues() : void
    - leastConstrainingValue() : void
    - constraintPropagation() : void
    - assignVariable(var : Variable, value : int) : bool
    - unassignVariable(var : Variable) : void
    + run() : unordered_map<string, int>
}

CSP "1..*" --> "1..*" Variable : contains
CSP "1..*" --> "1..*" Constraint : contains
Solver --> CSP : uses
Constraint --> Variable : references

@enduml
