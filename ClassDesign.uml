@startuml

class Variable {
    - id : int
    - domain : set<int>
    - domainDelta : stack<int>
    + reduceDomain(value : int) : void
    + restoreLastDomain() : void
    + getDomain() : set<int>& {query}
    + getId() : int {query}
}

abstract class Constraint {
    + isSatisfied(assignments : unordered_map<int, int>&) : bool {query}
    + getScope() : vector<Variable*>& {query}
}

class CSP {
    - variables : vector<Variable>
    - constraints : vector<unique_ptr<Constraint>>
    + CSP(const CSP&) = delete
    + operator=(const CSP&) : CSP& = delete
    + CSP(CSP&&) = delete
    + operator=(CSP&&) : CSP& = delete
    + addVariable(var : Variable) : void
    + addConstraint(constraint : unique_ptr<Constraint>&&) : void
    + getConstraints() : vector<unique_ptr<Constraint>>& {query}
    + getVariables() : vector<Variable>&
}

class Solver {
    - csp : CSP&
    - checkConstraint(assignments : unordered_map<int, int>&) : bool {query}
    - getUnassignedVariables() : vector<Variable*> {query}
    - forwardChecking() : void
    - arcConsistency() : void
    - minimumRemainingValues() : void
    - leastConstrainingValue() : void
    - constraintPropagation() : void
    + backtrackingSearch(unordered_map<int, int> assignments) : bool
}

CSP "1..*" --> "1..*" Variable : contains
CSP "1..*" --> "1..*" Constraint : contains
Solver --> CSP : uses
Constraint --> Variable : references

@enduml
